import { huffmanEncoding } from './huffmanEncoding';

describe('Given a series of letters associated with a binary sequence, use it to encode or decode a string.', () => {
  it('Encoding...', () => {
    expect(huffmanEncoding(`4
A 00
B 01
C 10
D 110
ENCODE
AABCCBAADBDDABD`)).toEqual("0000011010010000110011101100001110");
    expect(huffmanEncoding(`3
Y 0
E 10
S 11
ENCODE
YESYESYESYESYES`)).toEqual("0101101011010110101101011");
    expect(huffmanEncoding(`6
F 0
C 100
Q 101
A 1100
B 1101
R 111
ENCODE
QCCRBAQCCFQABRRFCRRBAFCQQABBRCBCCFQACFAA`)).toEqual("101100100111110111001011001000101110011011111110100111111110111000100101101110011011101111100110110010001011100100011001100");
  });

  it('Decoding...', () => {
    expect(huffmanEncoding(`5
A 00
B 01
C 10
D 110
E 111
DECODE
000110110111111110011000`)).toEqual("ABCDEEDBCA");
    expect(huffmanEncoding(`11
A 000
S 001
G 0100
V 0101
R 011
C 1000
J 1001
E 1010
P 1011
I 110
T 111
DECODE
100100001010000011000011110101111111000101000111010000111`)).toEqual("JAVASCRIPTISGREAT");
    expect(huffmanEncoding(`10
E 000
I 001
P 0100
U 0101
Q 011
O 100
Y 101
R 1100
T 1101
W 111
DECODE
100011001010111100011001001111000010101111011000010000000100010010111100111011010111000100010111100100010101111001010110100010000011110011010110101110011011100100101101001011111000101111110110101111100100110011001100101000001111010110100011111011010100011111001100110010100000111001111101110010111101110010010000111010000100100011101110010011100000111011011111101`)).toEqual("OQIUWEROWOIUWQEPEIEOYWITYQOPUWIEYQRYQPPEWOTQURTROYYIQWEYWTYQWIIORRYEIWUYEWTYPQWIORYEIRWTRYWQOOOITEPOQYROWEITYWT");
  });
});
